# -*- coding: utf-8 -*-
"""listaexerciciosmatriz

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QJHXYGrQHeNz0pTpENf7pi25HsBXOlvi
"""

vetor = list(range(100))
print(vetor)

NOTA = []

for i in range(10):
    nota = float(input(f"Digite a nota {i+1}: "))
    NOTA.append(nota)

media = sum(NOTA) / len(NOTA)

print(f"A média das notas é: {media:.2f}")

NOTA = []

for i in range(10):
    nota = float(input(f"Digite a nota {i+1}: "))
    NOTA.append(nota)

media = sum(NOTA) / len(NOTA)

acima_da_media = sum(1 for nota in NOTA if nota > media)

print(f"A média das notas é: {media:.2f}")
print(f"Quantidade de notas acima da média: {acima_da_media}")

NOTAS = []

for i in range(30):
    nota = float(input(f"Digite a nota do aluno {i+1}: "))
    NOTAS.append(nota)

maior_valor = max(NOTAS)
menor_valor = min(NOTAS)
media = sum(NOTAS) / len(NOTAS)
abaixo_da_media = sum(1 for nota in NOTAS if nota < media)

print(f"O maior valor é: {maior_valor:.2f}")
print(f"O menor valor é: {menor_valor:.2f}")
print(f"A média da turma é: {media:.2f}")
print(f"Quantidade de notas abaixo da média: {abaixo_da_media}")

VETOR = []

for i in range(100):
    numero = float(input(f"Digite o elemento {i+1}: "))
    VETOR.append(numero)

posicao = [i for i, numero in enumerate(VETOR) if numero == 30]

if posicao:
    print(f"O número 30 aparece nas posições: {posicao}")
else:
    print("O número 30 não foi encontrado no vetor.")

A = []

for i in range(100):
    numero = float(input(f"Digite o elemento {i+1}: "))
    A.append(numero)

somatorio = sum(A)

print(f"O somatório dos valores armazenados no vetor é: {somatorio:.2f}")

VETOR = []

for i in range(200):
    numero = float(input(f"Digite o valor {i+1}: "))
    VETOR.append(numero)

print("Os valores na ordem inversa são:")
for numero in reversed(VETOR):
    print(numero)

vetor1 = []
vetor2 = []
vetor3 = []

print("Digite os 10 elementos do vetor 1:")
for i in range(10):
    numero = float(input(f"Elemento {i+1}: "))
    vetor1.append(numero)

print("Digite os 10 elementos do vetor 2:")
for i in range(10):
    numero = float(input(f"Elemento {i+1}: "))
    vetor2.append(numero)

for i in range(10):
    vetor3.append(vetor1[i] + vetor2[i])

print("VETOR 1:", ' '.join(f"{num:.2f}" for num in vetor1))
print("VETOR 2:", ' '.join(f"{num:.2f}" for num in vetor2))
print("VETOR 3:", ' '.join(f"{num:.2f}" for num in vetor3))

vetor1 = []
vetor2 = []
vetor_intercalado = []

print("Digite os 25 elementos do vetor 1:")
for i in range(25):
    numero = float(input(f"Elemento {i+1}: "))
    vetor1.append(numero)

print("Digite os 25 elementos do vetor 2:")
for i in range(25):
    numero = float(input(f"Elemento {i+1}: "))
    vetor2.append(numero)

for i in range(25):
    vetor_intercalado.append(vetor1[i])
    vetor_intercalado.append(vetor2[i])

print("VETOR INTERCALADO:", ' '.join(f"{num:.2f}" for num in vetor_intercalado))

A = []

for i in range(100):
    numero = float(input(f"Digite o valor {i+1}: "))
    A.append(numero)

S = sum(i / A[i] for i in range(100))

contador_menor = sum(1 for i in range(100) if i < A[i])

print(f"S = {S:.2f}")
print(f"Quantidade de termos com numerador menor que o denominador: {contador_menor}")

vetor1 = []
vetor2 = []

for i in range(10):
    numero = float(input(f"Digite o elemento {i+1}: "))
    vetor1.append(numero)

for i in range(10):
    if i % 2 == 0:
        vetor2.append(vetor1[i] * 3)
    else:
        vetor2.append(vetor1[i] / 2)

print("VETOR 1:", ' '.join(f"{num:.2f}" for num in vetor1))
print("VETOR 2:", ' '.join(f"{num:.2f}" for num in vetor2))

A = []

for i in range(20):
    numero = float(input(f"Digite o elemento {i+1}: "))
    A.append(numero)

S = sum((A[i] - A[19 - i])**2 for i in range(10))

print(f"S = {S:.2f}")

frase = input("Digite uma frase com até 50 caracteres: ")

if len(frase) > 50:
    frase = frase[:50]

contar_brancos = frase.count(' ')
contar_A = frase.upper().count('A')

print(f"Quantidade de espaços em branco: {contar_brancos}")
print(f"Quantidade de vezes que a letra 'A' aparece: {contar_A}")

quantidades = []
precos = []

for i in range(100):
    quantidade = float(input(f"Mercadoria {i}: "))
    quantidades.append(quantidade)

for i in range(100):
    preco = float(input(f"Mercadoria {i}: "))
    precos.append(preco)

faturamento = sum(quantidades[i] * precos[i] for i in range(100))

print(f"Faturamento mensal do armazém: {faturamento:.2f}")

VET = []

for i in range(20):
    numero = float(input(f"Digite o elemento {i+1}: "))
    VET.append(numero)

VET.sort()

print("VETOR CLASSIFICADO:", ' '.join(f"{num:.2f}" for num in VET))

A = []

for i in range(128):
    numero = float(input(f"Digite o elemento {i+1}: "))
    A.append(numero)

K = float(input("Digite a chave K: "))

if K in A:
    posicao = A.index(K)
    print(f"CHAVE K ENCONTRADA NA POSIÇÃO: {posicao}")
else:
    print("CHAVE K NÃO ENCONTRADA")

def pesquisa_binaria(vetor, chave):
    esquerda = 0
    direita = len(vetor) - 1

    while esquerda <= direita:
        meio = (esquerda + direita) // 2
        if vetor[meio] == chave:
            return meio
        elif vetor[meio] < chave:
            esquerda = meio + 1
        else:
            direita = meio - 1

    return -1

A = []

for i in range(128):
    numero = float(input(f"Digite o elemento {i+1}: "))
    A.append(numero)

A.sort()

K = float(input("Digite a chave K: "))

posicao = pesquisa_binaria(A, K)

if posicao != -1:
    print(f"CHAVE K ENCONTRADA NA POSIÇÃO: {posicao}")
else:
    print("CHAVE K NÃO ENCONTRADA")

matriz = []

for i in range(15):
    linha = []
    for j in range(25):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

print("MATRIZ:")
for linha in matriz:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

matriz = []

for i in range(10):
    linha = []
    for j in range(20):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

linha_quinta = matriz[4]
somatorio = sum(linha_quinta)

print(f"Somatório dos elementos da quinta linha: {somatorio:.2f}")

tabela = []

for i in range(4):
    linha = []
    for j in range(5):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    tabela.append(linha)

soma_total = 0

for linha in tabela:
    soma_linha = sum(linha)
    print(f"Soma da linha: {soma_linha:.2f}")
    soma_total += soma_linha

print(f"Soma total de todos os elementos: {soma_total:.2f}")

matriz = []

for i in range(4):
    linha = []
    for j in range(4):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

k = float(input("Digite a constante k: "))

for i in range(4):
    matriz[i][i] *= k

for linha in matriz:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

matriz = []

for i in range(20):
    linha = []
    for j in range(20):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

for i in range(20):
    diagonal = matriz[i][i]
    for j in range(20):
        matriz[i][j] /= diagonal

for linha in matriz:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

matriz = []

for i in range(10):
    linha = []
    for j in range(10):
        elemento = int(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

for linha in matriz:
    print(' '.join(f"{elemento:3d}" for elemento in linha))

soma = 0

for i in range(10):
    for j in range(i + 1):
        soma += matriz[i][j]

print(f"Soma dos elementos abaixo da diagonal principal: {soma}")

matriz1 = []
matriz2 = []
soma_matriz = []

print("Digite os elementos da primeira matriz 3x5:")
for i in range(3):
    linha = []
    for j in range(5):
        elemento = float(input(f"Elemento [{i+1},{j+1}]: "))
        linha.append(elemento)
    matriz1.append(linha)

print("Digite os elementos da segunda matriz 3x5:")
for i in range(3):
    linha = []
    for j in range(5):
        elemento = float(input(f"Elemento [{i+1},{j+1}]: "))
        linha.append(elemento)
    matriz2.append(linha)

for i in range(3):
    linha_soma = []
    for j in range(5):
        soma = matriz1[i][j] + matriz2[i][j]
        linha_soma.append(soma)
    soma_matriz.append(linha_soma)

print("Matriz resultante da soma:")
for linha in soma_matriz:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

matriz = []
SOMALINHA = []

for i in range(4):
    linha = []
    for j in range(5):
        elemento = float(input(f"Digite o elemento da linha {i+1}, coluna {j+1}: "))
        linha.append(elemento)
    matriz.append(linha)

for linha in matriz:
    soma_linha = sum(linha)
    SOMALINHA.append(soma_linha)

TOTAL = sum(SOMALINHA)

print(f"Total da soma dos elementos de todas as linhas: {TOTAL:.2f}")
4

def matriz_produto(A, B):
    m = len(A)
    n = len(A[0])
    p = len(B[0])

    C = [[0] * p for _ in range(m)]

    for i in range(m):
        for j in range(p):
            C[i][j] = sum(A[i][k] * B[k][j] for k in range(n))

    return C

m = int(input("Digite o número de linhas da matriz A: "))
n = int(input("Digite o número de colunas da matriz A e o número de linhas da matriz B: "))
A = []
print("Digite os elementos da matriz A:")
for i in range(m):
    linha = []
    for j in range(n):
        elemento = float(input(f"Elemento [{i+1},{j+1}] da matriz A: "))
        linha.append(elemento)
    A.append(linha)

p = int(input("Digite o número de colunas da matriz B: "))
B = []
print("Digite os elementos da matriz B:")
for i in range(n):
    linha = []
    for j in range(p):
        elemento = float(input(f"Elemento [{i+1},{j+1}] da matriz B: "))
        linha.append(elemento)
    B.append(linha)

C = matriz_produto(A, B)

print("Matriz A:")
for linha in A:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

print("Matriz B:")
for linha in B:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

print("Matriz C (produto de A e B):")
for linha in C:
    print(' '.join(f"{elemento:.2f}" for elemento in linha))

estoque = [
    [1200, 3700, 3737],
    [1400, 4210, 4224],
    [2000, 2240, 2444]
]

custos = [260.00, 420.00, 330.00]

num_armazens = len(estoque)
num_produtos = len(custos)

for i in range(num_armazens):
    total_itens = sum(estoque[i])
    print(f"Armazém {i+1}: {total_itens} itens")

quantidade_produto2 = [estoque[i][1] for i in range(num_armazens)]
max_quantidade = max(quantidade_produto2)
armazem_max_produto2 = quantidade_produto2.index(max_quantidade) + 1
print(f"Armazém com a maior quantidade do Produto 2: Armazém {armazem_max_produto2}")

print("Custo de cada produto em cada armazém:")
for i in range(num_armazens):
    custos_armazem = [estoque[i][j] * custos[j] for j in range(num_produtos)]
    print(f"Armazém {i+1}: {custos_armazem}")

print("Custo total de estoque em cada armazém:")
for i in range(num_armazens):
    custo_total_armazem = sum(estoque[i][j] * custos[j] for j in range(num_produtos))
    print(f"Armazém {i+1}: R$ {custo_total_armazem:.2f}")

print("Custo de cada produto em todos os armazéns:")
for j in range(num_produtos):
    custo_total_produto = sum(estoque[i][j] * custos[j] for i in range(num_armazens))
    print(f"Produto {j+1}: R$ {custo_total_produto:.2f}")

linhas = 10
colunas = 30

matriz = [[i + j for j in range(colunas)] for i in range(linhas)]

for linha in matriz:
    print(' '.join(f"{elemento:3}" for elemento in linha))

A = []
for i in range(7):
    elemento = float(input(f"Elemento da linha {i+1} da matriz A: "))
    A.append(elemento)

B = []
for i in range(7):
    elemento = float(input(f"Elemento da linha {i+1} da matriz B: "))
    B.append(elemento)

C = [[A[i], B[i]] for i in range(7)]

for linha in C:
    print(' '.join(f"{elemento:6.2f}" for elemento in linha))

m = 20
n = 30

A = []
print("Digite os elementos da matriz A (20 linhas, 30 colunas):")
for i in range(m):
    linha = [int(input(f"Elemento [{i+1},{j+1}] da matriz A: ")) for j in range(n)]
    A.append(linha)

X = []
print("Digite os elementos do vetor X (30 elementos):")
for i in range(n):
    X.append(int(input(f"Elemento {i+1} do vetor X: ")))

Y = [sum(A[i][j] * X[j] for j in range(n)) for i in range(m)]

print("Matriz A:")
for linha in A:
    print(' '.join(f"{elemento:4}" for elemento in linha))

print("Vetor X:")
print(' '.join(f"{elemento:4}" for elemento in X))

print("Vetor Y:")
print(' '.join(f"{elemento:4}" for elemento in Y))

m = 20
n = 30

A = []
for i in range(m):
    linha = [int(input(f"Elemento [{i+1},{j+1}] da matriz A: ")) for j in range(n)]
    A.append(linha)

X = []
for i in range(n):
    X.append(int(input(f"Elemento {i+1} do vetor X: ")))

Y = [sum(A[i][j] * X[j] for j in range(n)) for i in range(m)]

for linha in A:
    print(' '.join(f"{elemento:4}" for elemento in linha))

print(' '.join(f"{elemento:4}" for elemento in X))

print(' '.join(f"{elemento:4}" for elemento in Y))

n = int(input("Digite o número de alunos: "))

X = []
for i in range(n):
    idade = int(input(f"Idade do aluno {i+1}: "))
    sexo = int(input(f"Sexo do aluno {i+1} (0 ou 1): "))
    curso = int(input(f"Curso do aluno {i+1}: "))
    nota = float(input(f"Nota do aluno {i+1}: "))
    X.append([idade, sexo, curso, nota])

melhor_nota = -1
matricula_melhor_nota = -1

for i in range(n):
    if X[i][1] == 0 and X[i][2] == 6:
        if X[i][3] > melhor_nota:
            melhor_nota = X[i][3]
            matricula_melhor_nota = i

if matricula_melhor_nota != -1:
    print(f"Aluno com matrícula {matricula_melhor_nota+1} é do sexo 0, curso 6, e obteve a melhor nota: {melhor_nota:.2f}")
else:
    print("Nenhum aluno do sexo 0 e curso 6 encontrado.")

m = 10
n = 10

QUANT = []
print("Digite os elementos da matriz QUANT (10 linhas, 10 colunas):")
for i in range(m):
    linha = [int(input(f"Elemento [{i+1},{j+1}] da matriz QUANT: ")) for j in range(n)]
    QUANT.append(linha)

soma_quadrados_coluna1 = sum(QUANT[i][0] ** 2 for i in range(m))

soma_cubos_linha2 = sum(QUANT[1][j] ** 3 for j in range(n))

soma_diagonal_principal = sum(QUANT[i][i] for i in range(m))

soma_total = sum(sum(linha) for linha in QUANT)

print(f"Somatório dos quadrados da 1ª coluna: {soma_quadrados_coluna1}")
print(f"Somatório dos cubos da 2ª linha: {soma_cubos_linha2}")
print(f"Somatório dos elementos da diagonal principal: {soma_diagonal_principal}")
print(f"Somatório total dos 100 elementos: {soma_total}")